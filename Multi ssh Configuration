# How to Create an SSH Config File

When managing multiple SSH identity files (e.g., private keys), you can create an SSH config file to define aliases for your various identities. This simplifies connecting to remote servers or repositories by allowing you to use shorthand aliases instead of full connection details. The SSH config file supports many parameters and approaches, but this guide uses a straightforward format for alias entries.

## Alias Entry Format

Here’s the basic structure for an alias in the SSH config file:
Host alias
    HostName bitbucket.org
    IdentityFile ~/.ssh/identity


- `Host`: The alias you’ll use when connecting (e.g., `ssh alias`).
- `HostName`: The actual hostname of the server (e.g., `bitbucket.org`).
- `IdentityFile`: The path to the SSH private key file.

## Creating a Config File for Two Identities

This example sets up a config file for two identities: `workid` (work-related) and `personalid` (personal). Follow these steps:

1. **Open a Terminal Window**  
   Launch your terminal to begin editing the SSH configuration.

2. **Edit or Create the `~/.ssh/config` File**  
   - Use a text editor like `nano` or `vim` (e.g., `nano ~/.ssh/config`).  
   - If the file doesn’t exist, creating it will start a new one.

3. **Add Aliases for Each Identity**  
   Add the following configuration to define your aliases:

    ```
    Host workid
        HostName bitbucket.org
        IdentityFile ~/.ssh/workid

    Host personalid
        HostName bitbucket.org
        IdentityFile ~/.ssh/personalid
    ```

   - Ensure the `IdentityFile` paths point to your actual SSH private key files.
   - Note: I corrected `~/ssh/personalid` to `~/.ssh/personalid` for consistency with standard SSH directory conventions.

4. **Save and Close the File**  
   - In `nano`, press `Ctrl+O`, then `Enter` to save, and `Ctrl+X` to exit.  
   - In `vim`, type `:wq` and press `Enter`.

## Using the Aliases

Once the config file is set up, you can use the aliases in place of the full hostname in Git commands. For example:

- **Original URL**: `git@bitbucket.org:accountname/reponame.git`
- **With Alias**: `git@workid:accountname/reponame.git` or `git@personalid:accountname/reponame.git`

This works with commands like `git clone`, `git push`, or `ssh` (e.g., `ssh workid`).

## Tips
- Ensure your SSH keys (`workid`, `personalid`) exist in `~/.ssh/` and have the correct permissions (`chmod 600 ~/.ssh/yourkey`).
- Test your setup with `ssh -T git@workid` to verify the connection to Bitbucket.

Happy SSH-ing!
